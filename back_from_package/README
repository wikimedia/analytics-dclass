What is this dClass thing ?
==================================

Dclass is a library created by Rezan Naghibi. It's aimed at solving the problem of device detection and it's very good and fast at what it does.
The original library is here https://github.com/TheWeatherChannel/dClass

So why do we need it ?
======================

The Analytics team needs to produce mobile reports. You can classify user-agents into mobile/non-mobile. Dclass tells you much more than that.
It tells you what resolution the device has. It tells you whether it is a tablet, or phone or desktop, who produced it, the brand name etc.

How does the Analytics team use this dClass thing ?
===================================================

We are using it inside Kraken, but everything starts here in this repo. We make this JNI shared library so we can use it from Java(which is the language Kraken is written in).
So, in short:

    kraken => dClass Pig UDF => org. wikimedia.analytics.dclassjni.DclassWrapper.java => libdclassjni.so (or libdclassjni.dylib, depending on  Arch )

Steps to build the debian package libdclass
===========================================

    # first of all you need to pull the debianize submodule
    git submodule update --init
    # Then you need some tags. If you are building a new version
    # make sure you've pulled from upstream and merged. Afterwards
    # make sure to make a new tag and then
    ./git2deblogs.pl --generate
    # Update the debian/symbols using the dpkg-gensymbols -e.libs/*.so -Odebian/symbols command 
    ## optional ( to clean out old packages )
    # rm -f ../libdclass_*;
    make clean; 
    ## optional ( to clean between consecutive package builds)
    # rm -rf configure Makefile debian/libdclass;
    libtoolize; 
    aclocal; 
    autoheader; 
    autoconf; 
    automake --add-missing; 
    dpkg-buildpackage -us -uc;
    ## optional (to show contentl of the package)
    # dpkg -c ../libdclass_0.1_i386.deb
    #Finally, check there are no important errors in the deb package using
    lintian -Ivi /path/to/package.deb

Building for OSX
================

Get JDK6 from http://developer.apple.com or here


Put this in your $HOME/.bashrc

    export JAVA_HOME=`/usr/libexec/java_home`

Get Mac Ports or brew and install them. Find more details about this here http://mxcl.github.com/homebrew/ or here http://www.macports.org/install.php .

Make sure you install automake, autoconf, libtool with brew or Mac ports.

Ok now we start building dClass. What we're trying to achieve is a shared object. On Linux it's called .so, on OSX it's called .dylib


     glibtoolize
     aclocal
     autoheader
     autoconf
     automake --add-missing
     ./configure
     make
     sudo make install

To make sure you've done this right, check to see if you have the .dylib in place:

     ls /usr/local/lib/libdclassjni.0.*

If you get some files matching that, then you're good. If not then contact the Analytics team.

